import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

class DeletingFileVisitor extends SimpleFileVisitor<Path> {
	@Override
	FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {
		Files.delete(path);
		return FileVisitResult.CONTINUE;
	}

	@Override
	FileVisitResult postVisitDirectory(Path directory, IOException ioException) throws IOException {
		Files.delete(directory);
		return FileVisitResult.CONTINUE;
	}
}

plugins {
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

version = rootProject.mod_version + "-fabric-" + rootProject.minecraft_version

dependencies {
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

	modCompileOnly "com.github.Draylar:reroll:${project.reroll_version}"
	modCompileOnly "maven.modrinth:charm:${project.charm_version}"
	modCompileOnly "maven.modrinth:spectrum:${project.spectrum_version}"
	modCompileOnly "maven.modrinth:enchanting-infuser:${project.enchanting_infuser_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
	common(project(path: ":fabric1_17", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":fabric1_17", configuration: "transformProductionFabric")) { transitive false }
}

shadowJar {
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = null
}

jar {
	archiveClassifier = "dev"
}

task finalize {
	doLast {
		// delete "header files" from jar
		var jar = remapJar.archiveFile.get().asFile.toPath()
		if (Files.exists(jar)) {
			var jarFileUri = new URI('jar:file', jar.toUri().getSchemeSpecificPart(), jar.toUri().getFragment())

			def del = (fs, pkg) -> {
				def path = fs.getPath(pkg)
				if (Files.exists(path)) Files.walkFileTree(path, new DeletingFileVisitor());
			}

			try (FileSystem fs = FileSystems.newFileSystem(jarFileUri, ['create': 'false'])) {
				del(fs, "dev")
			}
		}
	}
}

build.finalizedBy(finalize)

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			from components.java
		}
	}
}
